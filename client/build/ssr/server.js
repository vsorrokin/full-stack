const fs           = require('fs');
const path         = require('path');
const MFS          = require('memory-fs');
const webpack      = require('webpack');
const chokidar     = require('chokidar');
const _            = require('lodash');
const clientConfig = require('./client.conf.js');
const serverConfig = require('./server.conf.js');

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path || path.resolve('dist'), file), 'utf-8');
  } catch (e) {}
}

class DevServer {
  constructor(settings) {
    this.settings = settings;

    this.template       = null;
    this.bundle         = null;
    this.clientManifest = null;

    this.loadTemplateContent();
    this.setWebpackClientConfig();
    this.initWebpackClientCompiler();
    this.initWebpackServerCompiler();
  }

  initWebpackServerCompiler() {
    const serverCompiler = webpack(serverConfig);

    const mfs = new MFS();

    serverCompiler.outputFileSystem = mfs;

    serverCompiler.watch({}, (err, stats) => {
      if (err) throw err
      stats = stats.toJson()
      if (stats.errors.length) return

      // read bundle generated by vue-ssr-webpack-plugin
      this.bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));

      this.emitBundleUpdate();
    });
  }

  initWebpackClientCompiler() {
    // dev middleware
    const clientCompiler = webpack(clientConfig);

    const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
      publicPath: clientConfig.output.publicPath,
      noInfo: true
    });

    this.settings.app.use(devMiddleware);

    clientCompiler.plugin('done', stats => {
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))
      if (stats.errors.length) return;

      this.clientManifest = JSON.parse(readFile(
        devMiddleware.fileSystem,
        'vue-ssr-client-manifest.json'
      ));

      this.emitBundleUpdate();
    });

    // hot middleware
    this.settings.app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))
  }

  setWebpackClientConfig() {
    clientConfig.entry = ['webpack-hot-middleware/client', clientConfig.entry];
    _.set(clientConfig, 'output.filename', '[name].js');
    _.set(clientConfig, 'optimization.noEmitOnErrors', true);
    clientConfig.plugins.push(
      new webpack.HotModuleReplacementPlugin()
    )
  }

  loadTemplateContent() {
    this.template = fs.readFileSync(this.settings.templatePath, 'utf-8');
  }

  emitBundleUpdate() {
    if (!this.bundle || !this.clientManifest) return;

    this.settings.cb(this.bundle, {
      template: this.template,
      clientManifest: this.clientManifest
    });
  }

  initTemplateWatch() {
    chokidar.watch(this.settings.templatePath).on('change', () => {
      this.loadTemplateContent();
      console.log('index.html template updated.');
      this.emitBundleUpdate();
    })
  }
}

module.exports = DevServer;
